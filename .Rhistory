ind <- 30
est.ts <- rep(0, nrow(dataFrame))
numOfTraceback <- 2
if (nrow(dataFrame) >= ind){
est.ts[1:(ind - 1)] <- dataFrame[1:(ind - 1), "EstModified"]
#   current <- which(dataFrame[, 1] == currentDate)
current <- nrow(dataFrame)
if (length(current) == 0){
for (r in ind:nrow(dataFrame)){
tmpTab <- dataFrame[1:(r - 1), ]
endD <- as.character(tmpTab[(r - 1), 1])
enddate <- as.numeric(strsplit(endD[length(endD)], "/")[[1]])
breakTS <- ts(tmpTab[, "nb"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitB <- stl(breakTS, s.window="period")
estTS <- ts(tmpTab[, "EstModified"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitE <- stl(estTS, s.window="period")
diffValue <- (fitE$time.series[, "trend"] - fitB$time.series[, "trend"])
dValue <- mean(diffValue[(length(diffValue) - numOfTraceback):length(diffValue)])
est.ts[r] <- dataFrame[r, "EstModified"] - dValue
}
}else{
for (r in ind:nrow(dataFrame)){
if (r <= current){
tmpTab <- dataFrame[1:(r - 1), ]
endD <- as.character(tmpTab[(r - 1), 1])
enddate <- as.numeric(strsplit(endD[length(endD)], "/")[[1]])
breakTS <- ts(tmpTab[, "nb"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitB <- stl(breakTS, s.window="period")
estTS <- ts(tmpTab[, "EstModified"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitE <- stl(estTS, s.window="period")
diffValue <- (fitE$time.series[, "trend"] - fitB$time.series[, "trend"])
dValue <- mean(diffValue[(length(diffValue) - numOfTraceback):length(diffValue)])
est.ts[r] <- dataFrame[r, "EstModified"] - dValue
}else{
tmpTab <- dataFrame[1:current, ]
endD <- as.character(tmpTab[current, 1])
enddate <- as.numeric(strsplit(endD[length(endD)], "/")[[1]])
breakTS <- ts(tmpTab[, "nb"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitB <- stl(breakTS, s.window="period")
estTS <- ts(tmpTab[, "EstModified"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitE <- stl(estTS, s.window="period")
diffValue <- (fitE$time.series[, "trend"] - fitB$time.series[, "trend"])
dValue <- mean(diffValue[(length(diffValue) - numOfTraceback):length(diffValue)])
est.ts[r] <- dataFrame[r, "EstModified"] - dValue
}
}
}
}
neg <- which(est.ts < 0)
if (length(neg) > 0){est.ts[neg] <- 0}
dataFrame <- cbind(dataFrame, EstTs = est.ts)
#         elected <- selectNiC(dataM = dataM, YMD = ymd, minNi = 5, rmaNonparametricC. = rmaNonparametricC, uniqueProduct = uniqueProduct, nList = nList, x_mid = x_mid, x = x)
#       elected <- matrix(0, ncol = 7, nrow = 1)
}else{
dataFrame <- matrix(0, ncol = 7, nrow = 1)
}
}else{
dataFrame <- matrix(0, ncol = 7, nrow = 1)
}
return(dataFrame)
}
selectNiC <- cmpfun(selectNi2)
# ------------------------------
# ----- evaluation function
evalFun <- function(elected, componentName){
if (nrow(elected) > 1){
ele <- elected[, c(3, 6, 7, 8, 9)]
# sum of cumulative
cumulatedNon <- cumsum(elected[, "Est"] - elected[, "nb"])
cumulatedEmp <- cumsum(elected[, "Empirical"] - elected[, "nb"])
cumulatedMVTrend <- cumsum(elected[, "MVTrend"] - elected[, "nb"])
cumulatedM <- cumsum(elected[, "EstModified"] - elected[, "nb"])
cumulatedTs <- cumsum(elected[, "EstTs"] - elected[, "nb"])
len <- c((length(cumulatedNon) - 5):length(cumulatedNon))
cumulatedSum <- c(mean(cumulatedNon[len]),
mean(cumulatedEmp[len]),
mean(cumulatedMVTrend[len]),
mean(cumulatedM[len]),
mean(cumulatedTs[len]))
cumPositiveCri <- which(cumulatedSum > 20)
cumEle <- which(cumulatedSum %in% (sort(cumulatedSum[cumPositiveCri]))[c(1, 2)])
# proportion of shortage
proOfShortage <- c(sum(cumulatedEmp < 0)/length(cumulatedEmp),
sum(cumulatedNon < 0)/length(cumulatedNon),
sum(cumulatedMVTrend < 0)/length(cumulatedMVTrend),
sum(cumulatedM < 0)/length(cumulatedM),
sum(cumulatedTs < 0)/length(cumulatedTs))
proEle <- which(proOfShortage %in% sort(proOfShortage)[c(1, 2)])
eleFinal <- intersect(cumEle, proEle)
#
cumPositive <- cumulatedSum[which(cumulatedSum > 0)]
if (length(cumPositive) > 0){
minCumPos <- which(cumulatedSum == min(cumulatedSum[which(cumulatedSum > 0)]))
}else{
minCumPos <- integer(0)
}
#
if (length(eleFinal) > 0){ # intersect is none
index <- which(proOfShortage == min(proOfShortage[eleFinal]))
}else if (length(minCumPos) > 0){
index <- minCumPos
}else{
index <- 5
}
outMatrix <- matrix(c(rep(componentName, nrow(ele)), as.character(elected[, 1]), ele[, index]), ncol = 3)
}else{
outMatrix <- matrix(c(componentName, "NoData", "NoData"), nrow = 1)
}
return(outMatrix)
}
save.image("C:/Users/David79.Tseng/Dropbox/David79.Tseng/git-respository/rma-forecasting/rma-forecasting/rdata/allFunctionForAzureMLWorkspace.RData")
pro = 27
print(pro)
componentName <- compNameAppear[pro]
source("AllFunction.R")
# input1: date
currentDate <- "2015/08" # for simulation
ymd <- "2015/08"        # for last estimation
# input2: component name
listfile <- read.csv("C:\\Users\\David79.Tseng\\Dropbox\\David79.Tseng\\git-respository\\rma-forecasting\\rmaInventoryList.csv", header = TRUE)
save(listfile, file = "C:\\Users\\David79.Tseng\\Dropbox\\David79.Tseng\\git-respository\\rma-forecasting\\rma-forecasting\\rdata\\listfile.RData")
compName <- as.character(listfile[, 1])
nonAppearIndex <- which(compName %in% dat_com$PartNumber)
compNameAppear <- compName[nonAppearIndex]
if ("" %in% compNameAppear){compNameAppear <- compNameAppear[-which(compNameAppear == "")]}
pro
componentName <- compNameAppear[pro]
dataM <- dataArrC(dat_all = dat_all, dat_com = dat_com, dat_shipping = dat_shipping, dat_future_shipping = dat_future_shipping, componentName = componentName, YMD = ymd)
elected <- selectNiC(dataM = dataM, YMD = ymd, minNi = 5, rmaNonparametricC = rmaNonparametricC)
out <- evalFun(elected, componentName)
nrow(elected) > 1
elected
cumulatedNon <- cumsum(elected[, "Est"] - elected[, "nb"])
cumulatedEmp <- cumsum(elected[, "Empirical"] - elected[, "nb"])
cumulatedMVTrend <- cumsum(elected[, "MVTrend"] - elected[, "nb"])
cumulatedM <- cumsum(elected[, "EstModified"] - elected[, "nb"])
cumulatedTs <- cumsum(elected[, "EstTs"] - elected[, "nb"])
len <- c((length(cumulatedNon) - 5):length(cumulatedNon))
cumulatedSum <- c(mean(cumulatedNon[len]),
mean(cumulatedEmp[len]),
mean(cumulatedMVTrend[len]),
mean(cumulatedM[len]),
mean(cumulatedTs[len]))
cumPositiveCri <- which(cumulatedSum > 20)
cumEle <- which(cumulatedSum %in% (sort(cumulatedSum[cumPositiveCri]))[c(1, 2)])
# proportion of shortage
proOfShortage <- c(sum(cumulatedEmp < 0)/length(cumulatedEmp),
sum(cumulatedNon < 0)/length(cumulatedNon),
sum(cumulatedMVTrend < 0)/length(cumulatedMVTrend),
sum(cumulatedM < 0)/length(cumulatedM),
sum(cumulatedTs < 0)/length(cumulatedTs))
proEle <- which(proOfShortage %in% sort(proOfShortage)[c(1, 2)])
eleFinal <- intersect(cumEle, proEle)
#
cumPositive <- cumulatedSum[which(cumulatedSum > 0)]
if (length(cumPositive) > 0){
minCumPos <- which(cumulatedSum == min(cumulatedSum[which(cumulatedSum > 0)]))
}else{
minCumPos <- integer(0)
}
#
if (length(eleFinal) > 0){ # intersect is none
index <- which(proOfShortage == min(proOfShortage[eleFinal]))
}else if (length(minCumPos) > 0){
index <- minCumPos
}else{
index <- 5
}
outMatrix <- matrix(c(rep(componentName, nrow(ele)), as.character(elected[, 1]), ele[, index]), ncol = 3)
ele <- elected[, c(3, 6, 7, 8, 9)]
# sum of cumulative
cumulatedNon <- cumsum(elected[, "Est"] - elected[, "nb"])
cumulatedEmp <- cumsum(elected[, "Empirical"] - elected[, "nb"])
cumulatedMVTrend <- cumsum(elected[, "MVTrend"] - elected[, "nb"])
cumulatedM <- cumsum(elected[, "EstModified"] - elected[, "nb"])
cumulatedTs <- cumsum(elected[, "EstTs"] - elected[, "nb"])
len <- c((length(cumulatedNon) - 5):length(cumulatedNon))
cumulatedSum <- c(mean(cumulatedNon[len]),
mean(cumulatedEmp[len]),
mean(cumulatedMVTrend[len]),
mean(cumulatedM[len]),
mean(cumulatedTs[len]))
cumPositiveCri <- which(cumulatedSum > 20)
cumEle <- which(cumulatedSum %in% (sort(cumulatedSum[cumPositiveCri]))[c(1, 2)])
# proportion of shortage
proOfShortage <- c(sum(cumulatedEmp < 0)/length(cumulatedEmp),
sum(cumulatedNon < 0)/length(cumulatedNon),
sum(cumulatedMVTrend < 0)/length(cumulatedMVTrend),
sum(cumulatedM < 0)/length(cumulatedM),
sum(cumulatedTs < 0)/length(cumulatedTs))
proEle <- which(proOfShortage %in% sort(proOfShortage)[c(1, 2)])
eleFinal <- intersect(cumEle, proEle)
#
cumPositive <- cumulatedSum[which(cumulatedSum > 0)]
if (length(cumPositive) > 0){
minCumPos <- which(cumulatedSum == min(cumulatedSum[which(cumulatedSum > 0)]))
}else{
minCumPos <- integer(0)
}
#
if (length(eleFinal) > 0){ # intersect is none
index <- which(proOfShortage == min(proOfShortage[eleFinal]))
}else if (length(minCumPos) > 0){
index <- minCumPos
}else{
index <- 5
}
outMatrix <- matrix(c(rep(componentName, nrow(ele)), as.character(elected[, 1]), ele[, index]), ncol = 3)
ele <- elected[, c(3, 6, 7, 8, 9)]
# sum of cumulative
cumulatedNon <- cumsum(elected[, "Est"] - elected[, "nb"])
cumulatedEmp <- cumsum(elected[, "Empirical"] - elected[, "nb"])
cumulatedMVTrend <- cumsum(elected[, "MVTrend"] - elected[, "nb"])
cumulatedM <- cumsum(elected[, "EstModified"] - elected[, "nb"])
cumulatedTs <- cumsum(elected[, "EstTs"] - elected[, "nb"])
len <- c((length(cumulatedNon) - 5):length(cumulatedNon))
cumulatedSum <- c(mean(cumulatedNon[len]),
mean(cumulatedEmp[len]),
mean(cumulatedMVTrend[len]),
mean(cumulatedM[len]),
mean(cumulatedTs[len]))
cumPositiveCri <- which(cumulatedSum > 20)
cumEle <- which(cumulatedSum %in% (sort(cumulatedSum[cumPositiveCri]))[c(1, 2)])
# proportion of shortage
proOfShortage <- c(sum(cumulatedEmp < 0)/length(cumulatedEmp),
sum(cumulatedNon < 0)/length(cumulatedNon),
sum(cumulatedMVTrend < 0)/length(cumulatedMVTrend),
sum(cumulatedM < 0)/length(cumulatedM),
sum(cumulatedTs < 0)/length(cumulatedTs))
proEle <- which(proOfShortage %in% sort(proOfShortage)[c(1, 2)])
eleFinal <- intersect(cumEle, proEle)
#
cumPositive <- cumulatedSum[which(cumulatedSum > 0)]
if (length(cumPositive) > 0){
minCumPos <- which(cumulatedSum == min(cumulatedSum[which(cumulatedSum > 0)]))
}else{
minCumPos <- integer(0)
}
#
if (length(eleFinal) > 0){ # intersect is none
index <- which(proOfShortage == min(proOfShortage[eleFinal]))
}else if (length(minCumPos) > 0){
index <- minCumPos
}else{
index <- 5
}
outMatrix <- matrix(c(rep(componentName, nrow(ele)), as.character(elected[, 1]), ele[, index]), ncol = 3)
nrow(ele)
ele
rep(componentName, nrow(ele))
as.character(elected[, 1])
index
length(eleFinal) > 0
index <- which(proOfShortage == min(proOfShortage[eleFinal]))
index
proOfShortage
proEle <- which(proOfShortage %in% sort(proOfShortage)[c(1, 2)])
eleFinal <- intersect(cumEle, proEle)
proEle
proEle <- which(proOfShortage %in% sort(proOfShortage)[c(1, 2)])
eleFinal <- intersect(cumEle, proEle)
#
cumPositive <- cumulatedSum[which(cumulatedSum > 0)]
if (length(cumPositive) > 0){
minCumPos <- which(cumulatedSum == min(cumulatedSum[which(cumulatedSum > 0)]))
}else{
minCumPos <- integer(0)
}
#
minCumPos
eleFinal
proEle
eleFinal
proOfShortage[eleFinal]
index
which(proOfShortage == min(proOfShortage[eleFinal]))
proOfShortage
min(proOfShortage[eleFinal])
proOfShortage
cumPositiveCri
cumulatedSum
plot(1:nrow(elected), elected[, "nb"],
xlab = "Date", ylab = "Amount", main = componentName,
pch = 16, type = "b", lty = 2,
ylim = c(min(c(as.numeric(unlist(elected[, c(2, 3, 5, 6, 7)])))), max(c(as.numeric(unlist(elected[, c(2, 3, 5, 6, 7)]))))))
lines(1:nrow(elected), elected[, "Est"], col = "red", lwd = 2, type = "o")
lines(1:nrow(elected), elected[, "Empirical"], col = "blue", lwd = 2, type = "o")
lines(1:nrow(elected), elected[, "MVTrend"], col = "darkolivegreen", lwd = 2, type = "o")
lines(1:nrow(elected), elected[, "EstModified"], col = "darkgoldenrod", lwd = 2, type = "o")
lines(1:nrow(elected), elected[, "EstTs"], col = "purple", lwd = 2, type = "o")
legend("topleft", c("True", "Empirical", "Nonparametric", "MVTrend", "LinearEst", "LinearTsEst"),
lty = c(2, 1, 1, 1, 1, 1), col =c("black", "blue",  "red", "darkolivegreen", "darkgoldenrod", "purple"),
lwd = c(2, 2, 2, 2, 2, 2))
cumulatedNon <- cumsum(elected[, "Est"] - elected[, "nb"])
cumulatedEmp <- cumsum(elected[, "Empirical"] - elected[, "nb"])
cumulatedMVTrend <- cumsum(elected[, "MVTrend"] - elected[, "nb"])
cumulatedM <- cumsum(elected[, "EstModified"] - elected[, "nb"])
cumulatedTs <- cumsum(elected[, "EstTs"] - elected[, "nb"])
##
##
plot(1:nrow(elected), rep(0, nrow(elected)), type = "l", pch = 0,
ylim = c(min(c(cumulatedNon, cumulatedEmp, cumulatedMVTrend, cumulatedM, cumulatedTs)),
max(c(cumulatedNon, cumulatedEmp, cumulatedMVTrend, cumulatedM, cumulatedTs))),
xlab = "Date", ylab = "Cumulated difference",
main = componentName)
lines(1:nrow(elected), cumulatedNon, col = "red", lwd = 2)
lines(1:nrow(elected), cumulatedEmp, col = "blue", lwd = 2)
lines(1:nrow(elected), cumulatedMVTrend, col = "darkolivegreen", lwd = 2)
lines(1:nrow(elected), cumulatedM, col = "darkgoldenrod", lwd = 2)
lines(1:nrow(elected), cumulatedTs, col = "purple", lwd = 2)
cumPositiveCri <- which(cumulatedSum > 10)
cumEle <- which(cumulatedSum %in% (sort(cumulatedSum[cumPositiveCri]))[c(1, 2)])
# proportion of shortage
proOfShortage <- c(sum(cumulatedEmp < 0)/length(cumulatedEmp),
sum(cumulatedNon < 0)/length(cumulatedNon),
sum(cumulatedMVTrend < 0)/length(cumulatedMVTrend),
sum(cumulatedM < 0)/length(cumulatedM),
sum(cumulatedTs < 0)/length(cumulatedTs))
proEle <- which(proOfShortage %in% sort(proOfShortage)[c(1, 2)])
eleFinal <- intersect(cumEle, proEle)
#
cumPositive <- cumulatedSum[which(cumulatedSum > 0)]
if (length(cumPositive) > 0){
minCumPos <- which(cumulatedSum == min(cumulatedSum[which(cumulatedSum > 0)]))
}else{
minCumPos <- integer(0)
}
#
if (length(eleFinal) > 0){ # intersect is none
eleFinal
which(proOfShortage == min(proOfShortage[eleFinal]))
cumPositiveCri <- which(cumulatedSum > 20)
cumEle <- which(cumulatedSum %in% (sort(cumulatedSum[cumPositiveCri]))[c(1, 2)])
# proportion of shortage
proOfShortage <- c(sum(cumulatedEmp < 0)/length(cumulatedEmp),
sum(cumulatedNon < 0)/length(cumulatedNon),
sum(cumulatedMVTrend < 0)/length(cumulatedMVTrend),
sum(cumulatedM < 0)/length(cumulatedM),
sum(cumulatedTs < 0)/length(cumulatedTs))
proEle <- which(proOfShortage %in% sort(proOfShortage)[c(1, 2)])
eleFinal <- intersect(cumEle, proEle)
#
cumPositive <- cumulatedSum[which(cumulatedSum > 0)]
cumPositive <- cumulatedSum[which(cumulatedSum > 0)]
cumPositive
if (length(cumPositive) > 0){
minCumPos <- which(cumulatedSum == min(cumulatedSum[which(cumulatedSum > 0)]))
}else{
minCumPos <- integer(0)
}
eleFinal
min(proOfShortage[eleFinal])
index <- which(proOfShortage == min(proOfShortage[eleFinal]))
index
cumulatedSum[index]
cumulatedSum[index]
cumulatedSum[index] > 0
which(cumulatedSum[index] > 0)
cumulatedSum[which(cumulatedSum[index] > 0)]
cumulatedSum
index
which(cumulatedSum[index] > 0)
cumulatedSum[index]
(cumulatedSum[index] > 0)
cumulatedSum %in% (cumulatedSum[index] > 0)
cumulatedSum
(cumulatedSum[index] > 0) %in% cumulatedSum
index
cumulatedSum[index]
which(cumulatedSum[index] > 0)
cumulatedSum[index][which(cumulatedSum[index] > 0)]
which(cumulatedSum == min(cumulatedSum[index][which(cumulatedSum[index] > 0)]))
if (length(eleFinal) > 0){ # intersect is none
index <- which(proOfShortage == min(proOfShortage[eleFinal]))
if (length(index) > 1){
index <- which(cumulatedSum == min(cumulatedSum[index][which(cumulatedSum[index] > 0)]))
}
}else if (length(minCumPos) > 0){
index <- minCumPos
}else{
index <- 5
}
index
minCumPos
cumPositive <- cumulatedSum[which(cumulatedSum > 0)]
cumPositive
pro = 700
print(pro)
componentName <- compNameAppear[pro]
dataM <- dataArrC(dat_all = dat_all, dat_com = dat_com, dat_shipping = dat_shipping, dat_future_shipping = dat_future_shipping, componentName = componentName, YMD = ymd)
elected <- selectNiC(dataM = dataM, YMD = ymd, minNi = 5, rmaNonparametricC = rmaNonparametricC)
out <- evalFun(elected, componentName)
# source code
source("C:\\Users\\David79.Tseng\\Dropbox\\David79.Tseng\\git-respository\\rma-forecasting\\rma-forecasting\\allFunction.R")
# input1: date
# currentDate <- "2015/08" # for simulation
ymd <- "2015/08"        # for last estimation
# input2: component name
listfile <- read.csv("C:\\Users\\David79.Tseng\\Dropbox\\David79.Tseng\\git-respository\\rma-forecasting\\rmaInventoryList.csv", header = TRUE)
compName <- as.character(listfile[, 1])
nonAppearIndex <- which(compName %in% dat_com$PartNumber)
compNameAppear <- compName[nonAppearIndex]
if ("" %in% compNameAppear){compNameAppear <- compNameAppear[-which(compNameAppear == "")]}
#
componentName <- compNameAppear[pro]
dataM <- dataArrC(dat_all = dat_all, dat_com = dat_com, dat_shipping = dat_shipping, dat_future_shipping = dat_future_shipping, componentName = componentName, YMD = ymd)
elected <- selectNiC(dataM = dataM, YMD = ymd, minNi = 5, rmaNonparametricC = rmaNonparametricC)
out <- evalFun(elected, componentName)
out
pro = 834
componentName <- compNameAppear[pro]
dataM <- dataArrC(dat_all = dat_all, dat_com = dat_com, dat_shipping = dat_shipping, dat_future_shipping = dat_future_shipping, componentName = componentName, YMD = ymd)
elected <- selectNiC(dataM = dataM, YMD = ymd, minNi = 5, rmaNonparametricC = rmaNonparametricC)
out <- evalFun(elected, componentName)
pro = 900
out
componentName <- compNameAppear[pro]
dataM <- dataArrC(dat_all = dat_all, dat_com = dat_com, dat_shipping = dat_shipping, dat_future_shipping = dat_future_shipping, componentName = componentName, YMD = ymd)
elected <- selectNiC(dataM = dataM, YMD = ymd, minNi = 5, rmaNonparametricC = rmaNonparametricC)
out <- evalFun(elected, componentName)
out
output1 <- sapply(601:700, function(pro){
print(pro)
componentName <- compNameAppear[pro]
dataM <- dataArrC(dat_all = dat_all, dat_com = dat_com, dat_shipping = dat_shipping, dat_future_shipping = dat_future_shipping, componentName = componentName, YMD = ymd)
elected <- selectNiC(dataM = dataM, YMD = ymd, minNi = 5, rmaNonparametricC = rmaNonparametricC)
out <- evalFun(elected, componentName)
return(out)
})
output1
output1[[1]]
output1[[2]]
output1[[3]]
output1[[4]]
output1[[5]]
output1[[6]]
output1[[7]]
dim(output1[[8]])
dim(output1[[8]])[1]
dim(output1[[8]])[2]
length(output1)
for (z in 1:length(output1)){
print(dim(output1[[z]])[2])
}
output1[[1:10]]
output1[[1]]
output1[[10]]
output1[[11]]
output1[[12]]
output1[[13]]
output1[[14]]
output1[[13]]
output1[[14]]
pro = 614
componentName <- compNameAppear[pro]
dataM <- dataArrC(dat_all = dat_all, dat_com = dat_com, dat_shipping = dat_shipping, dat_future_shipping = dat_future_shipping, componentName = componentName, YMD = ymd)
elected <- selectNiC(dataM = dataM, YMD = ymd, minNi = 5, rmaNonparametricC = rmaNonparametricC)
out <- evalFun(elected, componentName)
nrow(elected) > 1
ele <- elected[, c(3, 6, 7, 8, 9)]
# sum of cumulative
cumulatedNon <- cumsum(elected[, "Est"] - elected[, "nb"])
cumulatedEmp <- cumsum(elected[, "Empirical"] - elected[, "nb"])
cumulatedMVTrend <- cumsum(elected[, "MVTrend"] - elected[, "nb"])
cumulatedM <- cumsum(elected[, "EstModified"] - elected[, "nb"])
cumulatedTs <- cumsum(elected[, "EstTs"] - elected[, "nb"])
len <- c((length(cumulatedNon) - 5):length(cumulatedNon))
cumulatedSum <- c(mean(cumulatedNon[len]),
mean(cumulatedEmp[len]),
mean(cumulatedMVTrend[len]),
mean(cumulatedM[len]),
mean(cumulatedTs[len]))
cumPositiveCri <- which(cumulatedSum > 20)
cumEle <- which(cumulatedSum %in% (sort(cumulatedSum[cumPositiveCri]))[c(1, 2)])
# proportion of shortage
proOfShortage <- c(sum(cumulatedEmp < 0)/length(cumulatedEmp),
sum(cumulatedNon < 0)/length(cumulatedNon),
sum(cumulatedMVTrend < 0)/length(cumulatedMVTrend),
sum(cumulatedM < 0)/length(cumulatedM),
sum(cumulatedTs < 0)/length(cumulatedTs))
proEle <- which(proOfShortage %in% sort(proOfShortage)[c(1, 2)])
eleFinal <- intersect(cumEle, proEle)
#
cumPositive <- cumulatedSum[which(cumulatedSum > 0)]
length(cumPositive) > 0
if (length(cumPositive) > 0){
minCumPos <- which(cumulatedSum == min(cumulatedSum[which(cumulatedSum > 0)]))
}else{
minCumPos <- integer(0)
}
length(eleFinal) > 0
length(minCumPos) > 0
minCumPos
which(cumulatedSum == min(cumulatedSum[which(cumulatedSum > 0)]))
cumulatedSum
which(cumulatedSum > 0
)
which(cumulatedSum > 0
cumulatedSum[which(cumulatedSum > 0)]
cumulatedSum[which(cumulatedSum > 0)]
(length(minCumPos) > 1)
minCumPos
proOfShortage[minCumPos]
min(proOfShortage[minCumPos])
which(minCumPos == min(proOfShortage[minCumPos]))
which(proOfShortage == min(proOfShortage[minCumPos]))
min(proOfShortage[minCumPos])
which(proOfShortage[minCumPos] == min(proOfShortage[minCumPos]))
proOfShortage[minCumPos]
proOfShortage[minCumPos]
min(proOfShortage[minCumPos])
minCumPos[which(proOfShortage[minCumPos] == min(proOfShortage[minCumPos]))]
