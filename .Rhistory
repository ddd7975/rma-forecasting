}
}
EstStorage <- matrix(c(tmpEst, tmpLower, tmpUpper, tmpTrendmv, tmpEstM), ncol = 5)
# -----
Est <- EstStorage[, 1]
Lower <- EstStorage[, 2]
Upper <- EstStorage[, 3]
nb <- c(as.numeric(n_break))
#----
MVTrend <- EstStorage[, 4]
EstModified <- EstStorage[, 5]
dataFrame <- data.frame(x = xDate, nb = nb, Est = Est, Lower = Lower, Upper = Upper,
MVTrend = MVTrend, EstModified = EstModified, Empirical = dataM[[6]])
## use time series to let the estimation close to the truth.
## ind is set as 30, because the frequency in time series is set as 12, it need at least 2 period.
ind <- 30
est.ts <- rep(0, nrow(dataFrame))
numOfTraceback <- 2
if (nrow(dataFrame) >= ind){
est.ts[1:(ind - 1)] <- dataFrame[1:(ind - 1), "EstModified"]
#   current <- which(dataFrame[, 1] == currentDate)
current <- nrow(dataFrame)
if (length(current) == 0){
for (r in ind:nrow(dataFrame)){
tmpTab <- dataFrame[1:(r - 1), ]
endD <- as.character(tmpTab[(r - 1), 1])
enddate <- as.numeric(strsplit(endD[length(endD)], "/")[[1]])
breakTS <- ts(tmpTab[, "nb"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitB <- stl(breakTS, s.window="period")
estTS <- ts(tmpTab[, "EstModified"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitE <- stl(estTS, s.window="period")
diffValue <- (fitE$time.series[, "trend"] - fitB$time.series[, "trend"])
dValue <- mean(diffValue[(length(diffValue) - numOfTraceback):length(diffValue)])
est.ts[r] <- dataFrame[r, "EstModified"] - dValue
}
}else{
for (r in ind:nrow(dataFrame)){
if (r <= current){
tmpTab <- dataFrame[1:(r - 1), ]
endD <- as.character(tmpTab[(r - 1), 1])
enddate <- as.numeric(strsplit(endD[length(endD)], "/")[[1]])
breakTS <- ts(tmpTab[, "nb"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitB <- stl(breakTS, s.window="period")
estTS <- ts(tmpTab[, "EstModified"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitE <- stl(estTS, s.window="period")
diffValue <- (fitE$time.series[, "trend"] - fitB$time.series[, "trend"])
dValue <- mean(diffValue[(length(diffValue) - numOfTraceback):length(diffValue)])
est.ts[r] <- dataFrame[r, "EstModified"] - dValue
}else{
tmpTab <- dataFrame[1:current, ]
endD <- as.character(tmpTab[current, 1])
enddate <- as.numeric(strsplit(endD[length(endD)], "/")[[1]])
breakTS <- ts(tmpTab[, "nb"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitB <- stl(breakTS, s.window="period")
estTS <- ts(tmpTab[, "EstModified"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitE <- stl(estTS, s.window="period")
diffValue <- (fitE$time.series[, "trend"] - fitB$time.series[, "trend"])
dValue <- mean(diffValue[(length(diffValue) - numOfTraceback):length(diffValue)])
est.ts[r] <- dataFrame[r, "EstModified"] - dValue
}
}
}
}
neg <- which(est.ts < 0)
if (length(neg) > 0){est.ts[neg] <- 0}
YMD <-yme
uniqueProduct <- as.character(unique(datShipPro$Product_Name))
#
minY <- dataM[[1]][1]; minM <- dataM[[1]][2]; minD <- dataM[[1]][3]
dataComp_c <- dataM[[2]]
datShipPro <- dataM[[3]]
dat_censored1 <- dataM[[4]]
n_break <- dataM[[5]]
endMonth <- seq(as.Date(paste(c(YMD, "01"), collapse = "/")), length = 2, by = "months")[2]
x1 <- as.character(seq(as.Date(paste(c(minY, minM, minD), collapse = "/")),
as.Date(endMonth), "months"))
x <- as.character(sapply(x1, function(y){
tmp <- strsplit(y, "-")[[1]]
tmp[3] <- "01"
tmp2 <- paste(tmp[1], tmp[2], tmp[3], sep="/")
return(tmp2)
}))
# ----- split the x so that it can match the dat_shipping (because dat_shipping only record the amount by month)
x_split <- 0
for (i in 1:length(x)){
tmp <- strsplit(x[i], "/")[[1]]
x_split[i] <- paste0(tmp[1], tmp[2])
}
x_mid <- sapply(1:length(x), function(i){
tmpd <- strsplit(x[i], "/")[[1]]
tmpd[3] <- "15"
paste(tmpd, collapse = "/")
})
nList <- lapply(1:length(uniqueProduct), function(i){
datShipPro_i <- datShipPro[which(datShipPro$Product_Name == uniqueProduct[i]), ]
n_ship <- sapply(1:(length(x_split)), function(j){
return(max(sum(datShipPro_i[which(datShipPro_i$Shipping_DT == x_split[j]), "Qty"]), 0))
})
return(matrix(n_ship, nrow=1))
})
for (l in 1:length(nList)){
colnames(nList[[l]]) <- x_mid[1:(length(x_mid))]
}
names(nList) <- uniqueProduct
dataComp_c <- dataM[[2]]
#########
x <- as.character(sapply(x1, function(y){
tmp <- strsplit(y, "-")[[1]]
tmp[3] <- "01"
tmp2 <- paste(tmp[1], tmp[2], sep="/")
return(tmp2)
}))
if (minD != 1){
x <- c(x, YMD)
}
xDate <- x[1:length(x) - 1]
#----- selection mechanism
tmpEst <- 0
tmpLower <- 0
tmpUpper <- 0
tmpTrendmv <- 0
tmpEstM <- 0
if (length(xDate) < 25){
twoPeriod <- length(xDate)
}else{
twoPeriod <- 24
}
for (i in 2:twoPeriod){
tmpStore <- apply(rmaNonparametricC(xDate[i], dataM, minNi = minNi, uniqueProduct = uniqueProduct, nList = nList, x_mid = x_mid, x = x, endMonth = endMonth), 1, sum)
tmpEst[i] <- tmpStore[1]
tmpLower[i] <- tmpStore[2]
tmpUpper[i] <- tmpStore[3]
tmpTrendmv[i] <- tmpStore[1]
tmpEstM[i] <- tmpStore[4]
if (i > 10){
mean1 <- mean(n_break[(i - 1):(i - 5)])
mean2 <- mean(n_break[(i - 2):(i - 6)])
mean3 <- mean(n_break[(i - 3):(i - 7)])
mean4 <- mean(n_break[(i - 4):(i - 8)])
mean5 <- mean(n_break[(i - 5):(i - 9)])
#-------------------
ft1 <- mean2 - mean1
ft2 <- mean3 - mean2
ft3 <- mean4 - mean3
ft4 <- mean5 - mean4
ftMean <- mean(c(ft1, ft2, ft3, ft4))
tmpTrendmv[i] <- mean(c(mean1 + ftMean,  sum(tmpStore[[1]])))
}
}
if (length(xDate) > 24){
for (i in 25:length(xDate)){
tmpStore <- apply(rmaNonparametricC(xDate[i], dataM, minNi = minNi, uniqueProduct = uniqueProduct, nList = nList, x_mid = x_mid, x = x, endMonth = endMonth), 1, sum)
tmpEst[i] <- tmpStore[1]
tmpLower[i] <- tmpStore[2]
tmpUpper[i] <- tmpStore[3]
tmpTrendmv[i] <- tmpStore[1]
tmpEstM[i] <- tmpStore[4]
#
mean1 <- mean(n_break[(i - 1):(i - 5)])
mean2 <- mean(n_break[(i - 2):(i - 6)])
mean3 <- mean(n_break[(i - 3):(i - 7)])
mean4 <- mean(n_break[(i - 4):(i - 8)])
mean5 <- mean(n_break[(i - 5):(i - 9)])
ft1 <- mean2 - mean1
ft2 <- mean3 - mean2
ft3 <- mean4 - mean3
ft4 <- mean5 - mean4
ftMean <- mean(c(ft1, ft2, ft3, ft4))
tmpTrendmv[i] <- mean(c(mean1 + ftMean,  sum(tmpStore[[1]])))
}
}
EstStorage <- matrix(c(tmpEst, tmpLower, tmpUpper, tmpTrendmv, tmpEstM), ncol = 5)
# -----
Est <- EstStorage[, 1]
Lower <- EstStorage[, 2]
Upper <- EstStorage[, 3]
nb <- c(as.numeric(n_break))
#----
MVTrend <- EstStorage[, 4]
EstModified <- EstStorage[, 5]
dataFrame <- data.frame(x = xDate, nb = nb, Est = Est, Lower = Lower, Upper = Upper,
MVTrend = MVTrend, EstModified = EstModified, Empirical = dataM[[6]])
## use time series to let the estimation close to the truth.
## ind is set as 30, because the frequency in time series is set as 12, it need at least 2 period.
ind <- 30
est.ts <- rep(0, nrow(dataFrame))
numOfTraceback <- 2
if (nrow(dataFrame) >= ind){
est.ts[1:(ind - 1)] <- dataFrame[1:(ind - 1), "EstModified"]
#   current <- which(dataFrame[, 1] == currentDate)
current <- nrow(dataFrame)
if (length(current) == 0){
for (r in ind:nrow(dataFrame)){
tmpTab <- dataFrame[1:(r - 1), ]
endD <- as.character(tmpTab[(r - 1), 1])
enddate <- as.numeric(strsplit(endD[length(endD)], "/")[[1]])
breakTS <- ts(tmpTab[, "nb"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitB <- stl(breakTS, s.window="period")
estTS <- ts(tmpTab[, "EstModified"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitE <- stl(estTS, s.window="period")
diffValue <- (fitE$time.series[, "trend"] - fitB$time.series[, "trend"])
dValue <- mean(diffValue[(length(diffValue) - numOfTraceback):length(diffValue)])
est.ts[r] <- dataFrame[r, "EstModified"] - dValue
}
}else{
for (r in ind:nrow(dataFrame)){
if (r <= current){
tmpTab <- dataFrame[1:(r - 1), ]
endD <- as.character(tmpTab[(r - 1), 1])
enddate <- as.numeric(strsplit(endD[length(endD)], "/")[[1]])
breakTS <- ts(tmpTab[, "nb"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitB <- stl(breakTS, s.window="period")
estTS <- ts(tmpTab[, "EstModified"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitE <- stl(estTS, s.window="period")
diffValue <- (fitE$time.series[, "trend"] - fitB$time.series[, "trend"])
dValue <- mean(diffValue[(length(diffValue) - numOfTraceback):length(diffValue)])
est.ts[r] <- dataFrame[r, "EstModified"] - dValue
}else{
tmpTab <- dataFrame[1:current, ]
endD <- as.character(tmpTab[current, 1])
enddate <- as.numeric(strsplit(endD[length(endD)], "/")[[1]])
breakTS <- ts(tmpTab[, "nb"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitB <- stl(breakTS, s.window="period")
estTS <- ts(tmpTab[, "EstModified"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitE <- stl(estTS, s.window="period")
diffValue <- (fitE$time.series[, "trend"] - fitB$time.series[, "trend"])
dValue <- mean(diffValue[(length(diffValue) - numOfTraceback):length(diffValue)])
est.ts[r] <- dataFrame[r, "EstModified"] - dValue
}
}
}
}
neg <- which(est.ts < 0)
if (length(neg) > 0){est.ts[neg] <- 0}
YMD
YMD <- ymd
YMD
uniqueProduct <- as.character(unique(datShipPro$Product_Name))
#
minY <- dataM[[1]][1]; minM <- dataM[[1]][2]; minD <- dataM[[1]][3]
dataComp_c <- dataM[[2]]
datShipPro <- dataM[[3]]
dat_censored1 <- dataM[[4]]
n_break <- dataM[[5]]
endMonth <- seq(as.Date(paste(c(YMD, "01"), collapse = "/")), length = 2, by = "months")[2]
x1 <- as.character(seq(as.Date(paste(c(minY, minM, minD), collapse = "/")),
as.Date(endMonth), "months"))
x <- as.character(sapply(x1, function(y){
tmp <- strsplit(y, "-")[[1]]
tmp[3] <- "01"
tmp2 <- paste(tmp[1], tmp[2], tmp[3], sep="/")
return(tmp2)
}))
# ----- split the x so that it can match the dat_shipping (because dat_shipping only record the amount by month)
x_split <- 0
for (i in 1:length(x)){
tmp <- strsplit(x[i], "/")[[1]]
x_split[i] <- paste0(tmp[1], tmp[2])
}
x_mid <- sapply(1:length(x), function(i){
tmpd <- strsplit(x[i], "/")[[1]]
tmpd[3] <- "15"
paste(tmpd, collapse = "/")
})
nList <- lapply(1:length(uniqueProduct), function(i){
datShipPro_i <- datShipPro[which(datShipPro$Product_Name == uniqueProduct[i]), ]
n_ship <- sapply(1:(length(x_split)), function(j){
return(max(sum(datShipPro_i[which(datShipPro_i$Shipping_DT == x_split[j]), "Qty"]), 0))
})
return(matrix(n_ship, nrow=1))
})
for (l in 1:length(nList)){
colnames(nList[[l]]) <- x_mid[1:(length(x_mid))]
}
names(nList) <- uniqueProduct
dataComp_c <- dataM[[2]]
#########
x <- as.character(sapply(x1, function(y){
tmp <- strsplit(y, "-")[[1]]
tmp[3] <- "01"
tmp2 <- paste(tmp[1], tmp[2], sep="/")
return(tmp2)
}))
if (minD != 1){
x <- c(x, YMD)
}
xDate <- x[1:length(x) - 1]
#----- selection mechanism
tmpEst <- 0
tmpLower <- 0
tmpUpper <- 0
tmpTrendmv <- 0
tmpEstM <- 0
if (length(xDate) < 25){
twoPeriod <- length(xDate)
}else{
twoPeriod <- 24
}
for (i in 2:twoPeriod){
tmpStore <- apply(rmaNonparametricC(xDate[i], dataM, minNi = minNi, uniqueProduct = uniqueProduct, nList = nList, x_mid = x_mid, x = x, endMonth = endMonth), 1, sum)
tmpEst[i] <- tmpStore[1]
tmpLower[i] <- tmpStore[2]
tmpUpper[i] <- tmpStore[3]
tmpTrendmv[i] <- tmpStore[1]
tmpEstM[i] <- tmpStore[4]
if (i > 10){
mean1 <- mean(n_break[(i - 1):(i - 5)])
mean2 <- mean(n_break[(i - 2):(i - 6)])
mean3 <- mean(n_break[(i - 3):(i - 7)])
mean4 <- mean(n_break[(i - 4):(i - 8)])
mean5 <- mean(n_break[(i - 5):(i - 9)])
#-------------------
ft1 <- mean2 - mean1
ft2 <- mean3 - mean2
ft3 <- mean4 - mean3
ft4 <- mean5 - mean4
ftMean <- mean(c(ft1, ft2, ft3, ft4))
tmpTrendmv[i] <- mean(c(mean1 + ftMean,  sum(tmpStore[[1]])))
}
}
if (length(xDate) > 24){
for (i in 25:length(xDate)){
tmpStore <- apply(rmaNonparametricC(xDate[i], dataM, minNi = minNi, uniqueProduct = uniqueProduct, nList = nList, x_mid = x_mid, x = x, endMonth = endMonth), 1, sum)
tmpEst[i] <- tmpStore[1]
tmpLower[i] <- tmpStore[2]
tmpUpper[i] <- tmpStore[3]
tmpTrendmv[i] <- tmpStore[1]
tmpEstM[i] <- tmpStore[4]
#
mean1 <- mean(n_break[(i - 1):(i - 5)])
mean2 <- mean(n_break[(i - 2):(i - 6)])
mean3 <- mean(n_break[(i - 3):(i - 7)])
mean4 <- mean(n_break[(i - 4):(i - 8)])
mean5 <- mean(n_break[(i - 5):(i - 9)])
ft1 <- mean2 - mean1
ft2 <- mean3 - mean2
ft3 <- mean4 - mean3
ft4 <- mean5 - mean4
ftMean <- mean(c(ft1, ft2, ft3, ft4))
tmpTrendmv[i] <- mean(c(mean1 + ftMean,  sum(tmpStore[[1]])))
}
}
EstStorage <- matrix(c(tmpEst, tmpLower, tmpUpper, tmpTrendmv, tmpEstM), ncol = 5)
# -----
Est <- EstStorage[, 1]
Lower <- EstStorage[, 2]
Upper <- EstStorage[, 3]
nb <- c(as.numeric(n_break))
#----
MVTrend <- EstStorage[, 4]
EstModified <- EstStorage[, 5]
dataFrame <- data.frame(x = xDate, nb = nb, Est = Est, Lower = Lower, Upper = Upper,
MVTrend = MVTrend, EstModified = EstModified, Empirical = dataM[[6]])
## use time series to let the estimation close to the truth.
## ind is set as 30, because the frequency in time series is set as 12, it need at least 2 period.
ind <- 30
est.ts <- rep(0, nrow(dataFrame))
numOfTraceback <- 2
if (nrow(dataFrame) >= ind){
est.ts[1:(ind - 1)] <- dataFrame[1:(ind - 1), "EstModified"]
#   current <- which(dataFrame[, 1] == currentDate)
current <- nrow(dataFrame)
if (length(current) == 0){
for (r in ind:nrow(dataFrame)){
tmpTab <- dataFrame[1:(r - 1), ]
endD <- as.character(tmpTab[(r - 1), 1])
enddate <- as.numeric(strsplit(endD[length(endD)], "/")[[1]])
breakTS <- ts(tmpTab[, "nb"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitB <- stl(breakTS, s.window="period")
estTS <- ts(tmpTab[, "EstModified"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitE <- stl(estTS, s.window="period")
diffValue <- (fitE$time.series[, "trend"] - fitB$time.series[, "trend"])
dValue <- mean(diffValue[(length(diffValue) - numOfTraceback):length(diffValue)])
est.ts[r] <- dataFrame[r, "EstModified"] - dValue
}
}else{
for (r in ind:nrow(dataFrame)){
if (r <= current){
tmpTab <- dataFrame[1:(r - 1), ]
endD <- as.character(tmpTab[(r - 1), 1])
enddate <- as.numeric(strsplit(endD[length(endD)], "/")[[1]])
breakTS <- ts(tmpTab[, "nb"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitB <- stl(breakTS, s.window="period")
estTS <- ts(tmpTab[, "EstModified"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitE <- stl(estTS, s.window="period")
diffValue <- (fitE$time.series[, "trend"] - fitB$time.series[, "trend"])
dValue <- mean(diffValue[(length(diffValue) - numOfTraceback):length(diffValue)])
est.ts[r] <- dataFrame[r, "EstModified"] - dValue
}else{
tmpTab <- dataFrame[1:current, ]
endD <- as.character(tmpTab[current, 1])
enddate <- as.numeric(strsplit(endD[length(endD)], "/")[[1]])
breakTS <- ts(tmpTab[, "nb"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitB <- stl(breakTS, s.window="period")
estTS <- ts(tmpTab[, "EstModified"], start=c(minY, minM), end=c(enddate[1], enddate[2]), frequency=12)
fitE <- stl(estTS, s.window="period")
diffValue <- (fitE$time.series[, "trend"] - fitB$time.series[, "trend"])
dValue <- mean(diffValue[(length(diffValue) - numOfTraceback):length(diffValue)])
est.ts[r] <- dataFrame[r, "EstModified"] - dValue
}
}
}
}
neg <- which(est.ts < 0)
if (length(neg) > 0){est.ts[neg] <- 0}
dataFrame <- cbind(dataFrame, EstTs = est.ts)
dataFrame
dataFrame[, 1]
YMD
which(as.character(dataFrame[, 1]) == YMD)
nowDate
which(as.character(dataFrame[, 1]) == nowDate)
elected
which(as.character(elected[, 1]) == nowDate) + 1
(which(as.character(elected[, 1]) == nowDate) + 1):nrow(elected)
nrow(elected) > 1
ele <- elected[, c(3, 6, 7, 8, 9)]
# sum of cumulative
cumulatedNon <- cumsum(elected[, "Est"] - elected[, "nb"])
cumulatedEmp <- cumsum(elected[, "Empirical"] - elected[, "nb"])
cumulatedMVTrend <- cumsum(elected[, "MVTrend"] - elected[, "nb"])
cumulatedM <- cumsum(elected[, "EstModified"] - elected[, "nb"])
cumulatedTs <- cumsum(elected[, "EstTs"] - elected[, "nb"])
len <- c((length(cumulatedNon) - 5):length(cumulatedNon))
cumulatedSum <- c(mean(cumulatedNon[len]),
mean(cumulatedEmp[len]),
mean(cumulatedMVTrend[len]),
mean(cumulatedM[len]),
mean(cumulatedTs[len]))
cumPositiveCri <- which(cumulatedSum > 20)
cumEle <- which(cumulatedSum %in% (sort(cumulatedSum[cumPositiveCri]))[c(1, 2)])
# proportion of shortage
proOfShortage <- c(sum(cumulatedEmp < 0)/length(cumulatedEmp),
sum(cumulatedNon < 0)/length(cumulatedNon),
sum(cumulatedMVTrend < 0)/length(cumulatedMVTrend),
sum(cumulatedM < 0)/length(cumulatedM),
sum(cumulatedTs < 0)/length(cumulatedTs))
proEle <- which(proOfShortage %in% sort(proOfShortage)[c(1, 2)])
eleFinal <- intersect(cumEle, proEle)
#
cumPositive <- cumulatedSum[which(cumulatedSum > 0)]
if (length(cumPositive) > 0){
minCumPos <- which(cumulatedSum == min(cumulatedSum[which(cumulatedSum > 0)]))
}else{
minCumPos <- integer(0)
}
#
if (length(eleFinal) > 0){ # intersect is none
index <- which(proOfShortage == min(proOfShortage[eleFinal]))
if (length(index) > 1){
index <- which(cumulatedSum == min(cumulatedSum[index][which(cumulatedSum[index] > 0)]))
}
}else if (length(minCumPos) > 0){
index <- minCumPos
if (length(minCumPos) > 1){
index <- minCumPos[which(proOfShortage[minCumPos] == min(proOfShortage[minCumPos]))]
}
}else{
index <- 5
}
index
if (length(index) > 1){index <- max(index)}
outMatrix <- matrix(c(rep(componentName, nrow(ele)), as.character(elected[, 1]), ele[, index]), ncol = 3)
elected[(which(as.character(elected[, 1]) == nowDate) + 1):nrow(elected), index]
outMatrix
elected
ele[(which(as.character(elected[, 1]) == nowDate) + 1):nrow(elected), index]
sum(ele[(which(as.character(elected[, 1]) == nowDate) + 1):nrow(elected), index])
outMatrix1 <- matrix(c(rep(componentName, nrow(ele)), as.character(elected[, 1]), ele[, index]), ncol = 3)
outMatrix2 <- matrix(componentName,
"LTB"
sum(ele[(which(as.character(elected[, 1]) == nowDate) + 1):nrow(elected), index]))
outMatrix2 <- matrix(componentName,
"LTB",
sum(ele[(which(as.character(elected[, 1]) == nowDate) + 1):nrow(elected), index]))
componentName
sum(ele[(which(as.character(elected[, 1]) == nowDate) + 1):nrow(elected), index])
outMatrix2 <- matrix(c(componentName,
"LTB",
sum(ele[(which(as.character(elected[, 1]) == nowDate) + 1):nrow(elected), index])), ncol = 3)
outMatrix2
rbind(outMatrix1, outMatrix2)
outMatrix <- rbind(outMatrix1, outMatrix2)
outMatrix
source("allFunction.R")
nowDate <- "2015/05" # for simulation
twoYearDate <- seq(as.Date(paste(c(nowDate, "01"), collapse = "/")), length = 26, by = "months")
ymd <- paste(strsplit(as.character(max(twoYearDate)), "-")[[1]][1:2], collapse = "/")
# input2: component name
listfile <- read.csv("C:\\Users\\David79.Tseng\\Dropbox\\David79.Tseng\\git-respository\\rma-forecasting\\rmaInventoryList.csv", header = TRUE)
save(listfile, file = "C:\\Users\\David79.Tseng\\Dropbox\\David79.Tseng\\git-respository\\rma-forecasting\\rma-forecasting\\rdata\\listfile.RData")
compName <- as.character(listfile[, 1])
nonAppearIndex <- which(compName %in% dat_com$PartNumber)
compNameAppear <- compName[nonAppearIndex]
if ("" %in% compNameAppear){compNameAppear <- compNameAppear[-which(compNameAppear == "")]}
output1 <- lapply(1:5, function(pro){
print(pro)
componentName <- compNameAppear[pro]
dataM <- dataArrC(dat_all = dat_all, dat_com = dat_com, dat_shipping = dat_shipping, dat_future_shipping = dat_future_shipping, componentName = componentName, YMD = ymd)
elected <- selectNiC(dataM = dataM, YMD = ymd, minNi = 5, rmaNonparametricC = rmaNonparametricC)
out <- evalFun(elected, componentName)
return(out)
})
output1 <- lapply(1:5, function(pro){
print(pro)
componentName <- compNameAppear[pro]
dataM <- dataArrC(dat_all = dat_all, dat_com = dat_com, dat_shipping = dat_shipping, dat_future_shipping = dat_future_shipping, componentName = componentName, YMD = ymd)
elected <- selectNiC(dataM = dataM, YMD = ymd, minNi = 5, rmaNonparametricC = rmaNonparametricC)
out <- evalFun(elected, componentName, nowDate)
return(out)
})
output1
